{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\n\nmetadata = {\n    systemName: \"stringutilities.javascriptbroker.k2nexus\",\n    displayName: \"String Utilities Javascript Broker\",\n    description: \"A JSSP based string utilities for K2 Nexus.\"\n};\n\nondescribe = async function ({ configuration }): Promise<void> {\n    postSchema({\n        objects: {\n            \"Similarity\": {\n                displayName: \"Similarity\",\n                description: \"Determine the similarity of 2 strings using different algorithms.\",\n                properties: {\n                    \"FirstString\": {\n                        displayName: \"String A\",\n                        type: \"string\"\n                    },\n                    \"SecondString\": {\n                        displayName: \"String B\",\n                        type: \"string\"\n                    },\n                    \"Similarity\": {\n                        displayName: \"Similarity\",\n                        type: \"decimal\"\n                    }\n                },\n                methods: {\n                    \"LevenshteinAlgorithm\": {\n                        displayName: \"Levenshtein Algorithm\",\n                        type: \"read\",\n                        inputs: [\"FirstString\", \"SecondString\"],\n                        requiredInputs: [\"FirstString\", \"SecondString\"],\n                        outputs: [\"Similarity\"]\n                    }\n                }\n            }\n        }\n    });\n}\n\nonexecute = async function ({ objectName, methodName, parameters, properties, configuration, schema }): Promise<void> {\n    switch (objectName) {\n        case \"Similarity\": await onExecuteSimilarity(methodName, properties, parameters); break;\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\n    }\n}\n\nasync function onExecuteSimilarity(methodName: string, properties: SingleRecord, parameters: SingleRecord): Promise<void> {\n    switch (methodName) {\n        case \"LevenshteinAlgorithm\": await LevenshteinAlgorithm(properties); break;\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\n    }\n}\n\n// Source: https://stackoverflow.com/questions/10473745/compare-strings-javascript-return-of-likely\n// Link: https://stackoverflow.com/a/36566052\nfunction LevenshteinAlgorithm(properties: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n        let s1: string = properties[\"FirstString\"].toString();\n        let s2: string = properties[\"SecondString\"].toString();\n\n        let longer = s1;\n        let shorter = s2;\n\n        if (s1.length < s2.length) {\n            longer = s2;\n            shorter = s1;\n        }\n\n        let longerLength: number = longer.length;\n        if (longerLength == 0) {\n            return 1.0;\n        }\n\n        let similarity: number = (longerLength - editDistance(longer, shorter)) / parseFloat(longerLength.toString());\n\n        postResult({\n            \"Similarity\": similarity\n        });\n        resolve();\n    });\n}\n\n// Source: https://stackoverflow.com/questions/10473745/compare-strings-javascript-return-of-likely\n// Link: https://stackoverflow.com/a/36566052\nfunction editDistance(s1, s2) {\n    s1 = s1.toLowerCase();\n    s2 = s2.toLowerCase();\n\n    var costs = new Array();\n    for (var i = 0; i <= s1.length; i++) {\n        var lastValue = i;\n        for (var j = 0; j <= s2.length; j++) {\n            if (i == 0)\n                costs[j] = j;\n            else {\n                if (j > 0) {\n                    var newValue = costs[j - 1];\n                    if (s1.charAt(i - 1) != s2.charAt(j - 1))\n                        newValue = Math.min(Math.min(newValue, lastValue),\n                            costs[j]) + 1;\n                    costs[j - 1] = lastValue;\n                    lastValue = newValue;\n                }\n            }\n        }\n        if (i > 0)\n            costs[s2.length] = lastValue;\n    }\n    return costs[s2.length];\n}"],"names":["metadata","systemName","displayName","description","ondescribe","async","configuration","postSchema","objects","properties","type","methods","inputs","requiredInputs","outputs","onexecute","objectName","methodName","parameters","schema","Promise","resolve","reject","s1","toString","s2","longer","shorter","length","longerLength","similarity","toLowerCase","costs","Array","i","lastValue","j","newValue","charAt","Math","min","editDistance","parseFloat","postResult","LevenshteinAlgorithm","Error","onExecuteSimilarity"],"mappings":"AAEAA,SAAW,CACPC,WAAY,2CACZC,YAAa,qCACbC,YAAa,+CAGjBC,WAAaC,gBAAgBC,cAAEA,IAC3BC,WAAW,CACPC,QAAS,YACS,CACVN,YAAa,aACbC,YAAa,oEACbM,WAAY,aACO,CACXP,YAAa,WACbQ,KAAM,uBAEM,CACZR,YAAa,WACbQ,KAAM,qBAEI,CACVR,YAAa,aACbQ,KAAM,YAGdC,QAAS,sBACmB,CACpBT,YAAa,wBACbQ,KAAM,OACNE,OAAQ,CAAC,cAAe,gBACxBC,eAAgB,CAAC,cAAe,gBAChCC,QAAS,CAAC,qBAQlCC,UAAYV,gBAAgBW,WAAEA,EAAFC,WAAcA,EAAdC,WAA0BA,EAA1BT,WAAsCA,EAAtCH,cAAkDA,EAAlDa,OAAiEA,WACjFH,OACC,mBAKbX,eAAmCY,EAAoBR,EAA0BS,UACrED,OACC,6BAOb,SAA8BR,UACnB,IAAIW,QAAc,CAACC,EAASC,SAC3BC,EAAad,EAAU,YAAgBe,WACvCC,EAAahB,EAAU,aAAiBe,WAExCE,EAASH,EACTI,EAAUF,EAEVF,EAAGK,OAASH,EAAGG,SACfF,EAASD,EACTE,EAAUJ,OAGVM,EAAuBH,EAAOE,UACd,GAAhBC,SACO,MAGPC,GAAsBD,EAWlC,SAAsBN,EAAIE,GACtBF,EAAKA,EAAGQ,cACRN,EAAKA,EAAGM,sBAEJC,EAAQ,IAAIC,MACPC,EAAI,EAAGA,GAAKX,EAAGK,OAAQM,IAAK,SAC7BC,EAAYD,EACPE,EAAI,EAAGA,GAAKX,EAAGG,OAAQQ,OACnB,GAALF,EACAF,EAAMI,GAAKA,UAEPA,EAAI,EAAG,KACHC,EAAWL,EAAMI,EAAI,GACrBb,EAAGe,OAAOJ,EAAI,IAAMT,EAAGa,OAAOF,EAAI,KAClCC,EAAWE,KAAKC,IAAID,KAAKC,IAAIH,EAAUF,GACnCH,EAAMI,IAAM,GACpBJ,EAAMI,EAAI,GAAKD,EACfA,EAAYE,EAIpBH,EAAI,IACJF,EAAMP,EAAGG,QAAUO,UAEpBH,EAAMP,EAAGG,QAnC6Ba,CAAaf,EAAQC,IAAYe,WAAWb,EAAaL,YAElGmB,WAAW,YACOb,IAElBT,MA9BmCuB,CAAqBnC,uBACzC,IAAIoC,MAAM,cAAgB5B,EAAa,uBAR7B6B,CAAoB7B,EAAYR,uBAC1C,IAAIoC,MAAM,cAAgB7B,EAAa"}